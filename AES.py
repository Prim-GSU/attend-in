#%%
import pandas as pd 
import numpy as np 
import binascii
#%%
class AES:
    """ AES round 10 class """
    def __init__(self,key = 'Thats my Kung Fu',message= 'Two One Nine Two'):
        self.key_bytes = np.array(list(bytes(key,'ascii')))
        self.message = np.array(list(bytes(message,'ascii')))
        self.round = 1
        self.round_key = self.key_bytes
        self.keys = list()
        self.keys.append(self.round_key)
        m = self.message.reshape(4,4)
        self.current_message_state = np.transpose(m)
        current_key_state = np.transpose(self.round_key.reshape(4,4))
        self.current_state_matrix = np.bitwise_xor(current_key_state,self.current_message_state)
        self.AES_output = list()
        a = np.array([[0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76],
        [0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0],
        [0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15],
        [0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75],
        [0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84],
        [0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf],
        [0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8],
        [0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2],
        [0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73],
        [0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb],
        [0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79],
        [0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08],
        [0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a],
        [0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e],
        [0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf],
        [0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16]])
        
        col = [0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f]
        
        row = [0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0]
        
        self.s_box = pd.DataFrame(a,columns=col,index=row)

        r = np.array([[0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36],
        [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
        [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
        [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]])

        self.mix_col_mat = np.array([[0x02,0x03,0x01,0x01],
        [0x01,0x02,0x3,0x01],
        [0x01,0x01,0x02,0x03],
        [0x03,0x01,0x01,0x02]])

        col_n = [1,2,3,4,5,6,7,8,9,10]

        self.Rcon = pd.DataFrame(r,columns=col_n)

    def computeNextRoundKey(self):
        W = self.round_key.reshape(4,4)
        nsm = list()
        nsm.append(self.ByteSubstitution(self.current_state_matrix[0]))
        nsm.append(np.roll(self.ByteSubstitution(self.current_state_matrix[1]),-1))
        nsm.append(np.roll(self.ByteSubstitution(self.current_state_matrix[2]),-2))
        nsm.append(np.roll(self.ByteSubstitution(self.current_state_matrix[3]),-3))
        new_state_matrix = np.stack(nsm,axis=0)

        if(self.round < 10):
            resulting_state_matrix = self.ComputeResultingStateMatrix(new_state_matrix)
        else:
            resulting_state_matrix = new_state_matrix
        

        g = self.g(W = W)
        w4 = np.bitwise_xor(W[0],g)
        w5 = np.bitwise_xor(w4,W[1])
        w6 = np.bitwise_xor(w5,W[2])
        w7 = np.bitwise_xor(w6,W[3])
        n_W = np.concatenate((w4,w5,w6,w7),axis=0)
        self.round = self.round + 1
        self.round_key = n_W.reshape(16)
        state_matrix_round_key = np.transpose(n_W)
        aes_state_matrix = np.bitwise_xor(state_matrix_round_key,resulting_state_matrix)
        self.current_state_matrix = aes_state_matrix
        self.AES_output.append(np.transpose(aes_state_matrix).reshape(16))
        return self.round_key

    def ComputeResultingStateMatrix(self,new_state_matrix):
        l = list()
        for i in range(4):
            for j in range(4):
                l.append(self.MultiplyRows(self.mix_col_mat[i,:],new_state_matrix[:,j]))
        n = np.array(l).reshape(4,4)
        return n

    def MultiplyRows(self,m_c_m,n_s_m):
        l = list()
        for i in range(4):
            if(m_c_m[i] > 1):
                if(m_c_m[i] == 2):
                    l.append(self.MultiplyBy2(n_s_m[i]))
                elif(m_c_m[i] == 3):
                    v = self.MultiplyBy2(n_s_m[i])
                    v  = v ^ n_s_m[i]
                    l.append(v)
            else:
                l.append(n_s_m[i])
        return l[0] ^ l[1] ^ l[2] ^ l[3]


    def MultiplyBy2(self,val):
        n_v = 2 * val
        if(n_v > 255):
            n_v = n_v & 0b011111111
            n_v = n_v ^ 0b00011011
        return n_v

    def g(self,W):
        shifted_w3 = np.roll(W[3],-1)
        byte_substitution= self.ByteSubstitution(shifted_w3=shifted_w3) 
        round_constant = self.Rcon[[self.round]].transpose().to_numpy()
        added_constant = np.bitwise_xor(byte_substitution,round_constant)
        return added_constant

    def ByteSubstitution(self,shifted_w3):
         byte_substitution= list()
         for i in range(0,4):
             byte_substitution.append(self.s_box.loc[shifted_w3[i] - (shifted_w3[i]%16)][shifted_w3[i]%16]) 
         return np.array(byte_substitution)

    def ComputeNRound(self):
        for i in range(1,11):
            key = self.computeNextRoundKey()
            self.keys.append(key)
        f = open("round_keys.txt", "a")
        for i in range(0,11):
            for j in range(0,16):
                s = format(self.keys[i][j],'x').upper()
                f.write(s)
                if (j == 15):
                    f.write('\n')
                else:
                    f.write(',')
        f.close()
        f = open('AES_output.txt','a')
        for i in range(0,10):
            for j in range(0,16):
                s = format(self.AES_output[i][j],'x').upper()
                f.write(s)
                if (j == 15):
                    f.write('\n')
                else:
                    f.write(',')
        f.close()
        self.round = 0

# %%
